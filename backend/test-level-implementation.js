// backend/test-level-implementation.js
const express = require('express');
const cors = require('cors');
const { sequelize } = require('./models');
const imageStorageService = require('./services/ImageStorageService');
const ativoRoutes = require('./routes/ativos');

async function testLevelImplementation() {
  console.log('üß™ Iniciando teste da implementa√ß√£o Level...\n');
  
  try {
    // Teste 1: Inicializar servi√ßo Level
    console.log('1Ô∏è‚É£ Testando inicializa√ß√£o do servi√ßo Level...');
    await imageStorageService.initialize();
    console.log('‚úÖ Servi√ßo Level inicializado com sucesso');
    
    // Teste 2: Teste b√°sico de armazenamento
    console.log('\n2Ô∏è‚É£ Testando opera√ß√µes b√°sicas de armazenamento...');
    const testKey = 'test_' + Date.now();
    const testData = Buffer.from('Dados de teste para Level');
    
    await imageStorageService.saveImage(testKey, testData);
    console.log('‚úÖ Imagem salva no Level');
    
    const retrievedData = await imageStorageService.getImage(testKey);
    console.log('‚úÖ Imagem recuperada do Level');
    
    if (Buffer.compare(testData, retrievedData) === 0) {
      console.log('‚úÖ Dados recuperados est√£o √≠ntegros');
    } else {
      console.log('‚ùå Dados recuperados n√£o conferem');
    }
    
    await imageStorageService.deleteImage(testKey);
    console.log('‚úÖ Imagem removida do Level');
    
    // Teste 3: Verificar se o banco foi criado
    console.log('\n3Ô∏è‚É£ Verificando estrutura do banco Level...');
    const fs = require('fs');
    const path = require('path');
    const dbPath = path.join(__dirname, 'data', 'images.db');
    
    if (fs.existsSync(dbPath)) {
      console.log('‚úÖ Banco de dados Level criado em:', dbPath);
    } else {
      console.log('‚ùå Banco de dados Level n√£o encontrado');
    }
    
    // Teste 4: Estat√≠sticas
    console.log('\n4Ô∏è‚É£ Testando estat√≠sticas...');
    const stats = await imageStorageService.getStats();
    console.log('‚úÖ Estat√≠sticas obtidas:', stats);
    
    // Teste 5: Conectividade com MySQL
    console.log('\n5Ô∏è‚É£ Testando conectividade com MySQL...');
    await sequelize.authenticate();
    console.log('‚úÖ Conex√£o com MySQL estabelecida');
    
    // Teste 6: Simular servidor com rotas
    console.log('\n6Ô∏è‚É£ Testando configura√ß√£o do servidor...');
    const app = express();
    app.use(cors());
    app.use(express.json());
    app.use('/api/ativos', ativoRoutes);
    
    const server = app.listen(0, () => {
      const port = server.address().port;
      console.log(`‚úÖ Servidor teste rodando na porta ${port}`);
      server.close();
    });
    
    console.log('\nüéâ Todos os testes passaram! A implementa√ß√£o Level est√° pronta.');
    console.log('\nüìã Resumo da implementa√ß√£o:');
    console.log('‚Ä¢ Servi√ßo ImageStorageService configurado com Level');
    console.log('‚Ä¢ Controller AtivoControllerLevel criado');
    console.log('‚Ä¢ Rotas atualizadas para usar Level');
    console.log('‚Ä¢ Armazenamento: Level (bin√°rio) + MySQL (metadados)');
    console.log('‚Ä¢ Performance otimizada sem depend√™ncia de arquivos');
    
  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error);
  } finally {
    await imageStorageService.close();
    await sequelize.close();
  }
}

// Executar teste
testLevelImplementation();