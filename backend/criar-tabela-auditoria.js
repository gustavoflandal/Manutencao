const { sequelize } = require('./models');

async function criarTabelaAuditoria() {
  try {
    console.log('üîß Criando tabela de auditoria...\n');

    // Criar tabela de logs_operacoes diretamente
    await sequelize.query(`
      CREATE TABLE IF NOT EXISTS logs_operacoes (
        id INT AUTO_INCREMENT PRIMARY KEY,
        operacao VARCHAR(100) NOT NULL COMMENT 'Tipo de opera√ß√£o: CREATE, UPDATE, DELETE, LOGIN, LOGOUT, VIEW, etc.',
        modulo VARCHAR(50) NOT NULL COMMENT 'M√≥dulo do sistema: ATIVOS, USUARIOS, CATEGORIAS, etc.',
        descricao TEXT NOT NULL COMMENT 'Descri√ß√£o detalhada da opera√ß√£o realizada',
        
        usuario_id INT NULL COMMENT 'ID do usu√°rio que executou a opera√ß√£o',
        usuario_nome VARCHAR(200) NULL COMMENT 'Nome do usu√°rio (snapshot para auditoria)',
        usuario_email VARCHAR(200) NULL COMMENT 'Email do usu√°rio (snapshot para auditoria)',
        
        ip_address VARCHAR(45) NULL COMMENT 'Endere√ßo IP do usu√°rio',
        user_agent TEXT NULL COMMENT 'User Agent do navegador',
        sessao_id VARCHAR(255) NULL COMMENT 'ID da sess√£o',
        
        recurso_tipo VARCHAR(50) NULL COMMENT 'Tipo do recurso afetado: ativo, usuario, categoria, etc.',
        recurso_id INT NULL COMMENT 'ID do recurso afetado',
        recurso_codigo VARCHAR(100) NULL COMMENT 'C√≥digo/identificador do recurso (ex: codigo_patrimonio)',
        
        estado_anterior JSON NULL COMMENT 'Estado do recurso antes da opera√ß√£o',
        estado_novo JSON NULL COMMENT 'Estado do recurso ap√≥s a opera√ß√£o',
        
        sucesso BOOLEAN NOT NULL DEFAULT true COMMENT 'Se a opera√ß√£o foi executada com sucesso',
        erro_detalhes TEXT NULL COMMENT 'Detalhes do erro caso a opera√ß√£o tenha falhado',
        
        duracao_ms INT NULL COMMENT 'Dura√ß√£o da opera√ß√£o em milissegundos',
        endpoint VARCHAR(255) NULL COMMENT 'Endpoint da API chamado',
        metodo_http VARCHAR(10) NULL COMMENT 'M√©todo HTTP: GET, POST, PUT, DELETE',
        parametros JSON NULL COMMENT 'Par√¢metros enviados na opera√ß√£o (sem dados sens√≠veis)',
        
        nivel_risco ENUM('BAIXO', 'MEDIO', 'ALTO', 'CRITICO') DEFAULT 'BAIXO' COMMENT 'N√≠vel de risco da opera√ß√£o para auditoria',
        
        observacoes TEXT NULL COMMENT 'Observa√ß√µes adicionais sobre a opera√ß√£o',
        
        data_operacao DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Data e hora da opera√ß√£o',
        
        createdAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
        updatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        
        INDEX idx_logs_usuario_id (usuario_id),
        INDEX idx_logs_operacao (operacao),
        INDEX idx_logs_modulo (modulo),
        INDEX idx_logs_data_operacao (data_operacao),
        INDEX idx_logs_recurso (recurso_tipo, recurso_id),
        INDEX idx_logs_nivel_risco (nivel_risco),
        INDEX idx_logs_sucesso (sucesso),
        INDEX idx_logs_ip_address (ip_address)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    `);

    console.log('‚úÖ Tabela logs_operacoes criada com sucesso!');

    // Testar inser√ß√£o
    console.log('\nüß™ Testando inser√ß√£o de log...');
    await sequelize.query(`
      INSERT INTO logs_operacoes (
        operacao, modulo, descricao, usuario_nome, usuario_email, 
        nivel_risco, observacoes, data_operacao
      ) VALUES (
        'CREATE', 'SISTEMA', 'Teste de configura√ß√£o do sistema de auditoria',
        'Sistema', 'sistema@manutencao.com', 'BAIXO',
        'Log de teste criado durante configura√ß√£o inicial', NOW()
      )
    `);

    console.log('‚úÖ Log de teste inserido com sucesso!');

    // Verificar se funcionou
    const [results] = await sequelize.query(`
      SELECT COUNT(*) as total FROM logs_operacoes
    `);

    console.log(`üìä Total de logs na tabela: ${results[0].total}`);

    console.log('\nüéâ Sistema de auditoria configurado com sucesso!');
    console.log('\nüìã Funcionalidades dispon√≠veis:');
    console.log('   ‚Ä¢ Auditoria autom√°tica de opera√ß√µes CRUD');
    console.log('   ‚Ä¢ Logs de login/logout');
    console.log('   ‚Ä¢ Rastreamento de opera√ß√µes cr√≠ticas');
    console.log('   ‚Ä¢ Relat√≥rios de auditoria');
    console.log('   ‚Ä¢ Estat√≠sticas de uso');
    console.log('\nüåê Endpoints dispon√≠veis:');
    console.log('   GET /api/auditoria/logs - Listar logs');
    console.log('   GET /api/auditoria/estatisticas - Estat√≠sticas');
    console.log('   GET /api/auditoria/relatorio - Relat√≥rio');
    console.log('   GET /api/auditoria/criticas - Opera√ß√µes cr√≠ticas');

    process.exit(0);
  } catch (error) {
    console.error('‚ùå Erro ao criar tabela de auditoria:', error);
    process.exit(1);
  }
}

criarTabelaAuditoria();