const sequelize = require('./config/database.js');

async function criarTabelasAnalytics() {
    try {
        console.log('üèóÔ∏è Criando tabelas do sistema de Analytics...\n');

        // 1. Tabela de M√©tricas
        console.log('üìä Criando tabela metricas...');
        await sequelize.query(`
            CREATE TABLE IF NOT EXISTS metricas (
                id INT AUTO_INCREMENT PRIMARY KEY,
                tipo ENUM(
                    'tempo_medio_resolucao',
                    'eficiencia_manutencao',
                    'disponibilidade_ativo',
                    'custo_manutencao',
                    'produtividade_tecnico',
                    'taxa_retrabalho',
                    'consumo_estoque',
                    'preventiva_vs_corretiva',
                    'satisfacao_usuario',
                    'kpi_personalizado'
                ) NOT NULL COMMENT 'Tipo da m√©trica coletada',
                nome VARCHAR(255) NOT NULL COMMENT 'Nome descritivo da m√©trica',
                descricao TEXT COMMENT 'Descri√ß√£o detalhada da m√©trica',
                valor DECIMAL(15,4) NOT NULL COMMENT 'Valor num√©rico da m√©trica',
                unidade VARCHAR(50) COMMENT 'Unidade de medida (horas, %, R$, etc.)',
                periodo ENUM(
                    'diario',
                    'semanal',
                    'mensal',
                    'trimestral',
                    'anual',
                    'tempo_real'
                ) NOT NULL COMMENT 'Per√≠odo de coleta da m√©trica',
                data_inicio DATE NOT NULL COMMENT 'Data de in√≠cio do per√≠odo medido',
                data_fim DATE NOT NULL COMMENT 'Data de fim do per√≠odo medido',
                ativo_id INT NULL COMMENT 'ID do ativo relacionado (se aplic√°vel)',
                setor_id INT NULL COMMENT 'ID do setor relacionado (se aplic√°vel)',
                user_id INT NULL COMMENT 'ID do usu√°rio relacionado (se aplic√°vel)',
                categoria VARCHAR(100) COMMENT 'Categoria da m√©trica para agrupamento',
                metadata JSON COMMENT 'Dados adicionais em formato JSON',
                tendencia ENUM('crescente', 'decrescente', 'estavel', 'volatil') COMMENT 'Tend√™ncia identificada automaticamente',
                meta DECIMAL(15,4) COMMENT 'Meta estabelecida para esta m√©trica',
                status_meta ENUM('atingiu', 'nao_atingiu', 'superou', 'em_progresso') COMMENT 'Status em rela√ß√£o √† meta',
                calculado_automaticamente BOOLEAN DEFAULT TRUE COMMENT 'Se foi calculado automaticamente ou inserido manualmente',
                ativo BOOLEAN DEFAULT TRUE COMMENT 'Se a m√©trica est√° ativa para coleta',
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                
                INDEX idx_metricas_tipo (tipo),
                INDEX idx_metricas_periodo (periodo, data_inicio, data_fim),
                INDEX idx_metricas_ativo (ativo_id),
                INDEX idx_metricas_setor (setor_id),
                INDEX idx_metricas_usuario (user_id),
                INDEX idx_metricas_categoria (categoria),
                
                FOREIGN KEY (ativo_id) REFERENCES ativos(id) ON DELETE SET NULL,
                FOREIGN KEY (setor_id) REFERENCES setores(id) ON DELETE SET NULL,
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
        `);
        console.log('‚úÖ Tabela metricas criada com sucesso');

        // 2. Tabela de Dashboards
        console.log('\nüìã Criando tabela dashboards...');
        await sequelize.query(`
            CREATE TABLE IF NOT EXISTS dashboards (
                id INT AUTO_INCREMENT PRIMARY KEY,
                nome VARCHAR(255) NOT NULL COMMENT 'Nome do dashboard',
                descricao TEXT COMMENT 'Descri√ß√£o do dashboard',
                tipo ENUM(
                    'executivo',
                    'operacional',
                    'tecnico',
                    'gerencial',
                    'personalizado'
                ) NOT NULL COMMENT 'Tipo do dashboard',
                user_id INT NOT NULL COMMENT 'Propriet√°rio do dashboard',
                configuracao JSON NOT NULL COMMENT 'Configura√ß√£o dos widgets e layout',
                widgets JSON NOT NULL COMMENT 'Lista de widgets e suas configura√ß√µes',
                filtros_padrao JSON COMMENT 'Filtros padr√£o aplicados ao dashboard',
                periodo_padrao ENUM(
                    'hoje',
                    'ontem',
                    'ultimos_7_dias',
                    'ultimos_30_dias',
                    'ultimo_mes',
                    'ultimos_3_meses',
                    'ultimo_ano',
                    'personalizado'
                ) DEFAULT 'ultimos_30_dias' COMMENT 'Per√≠odo padr√£o para dados',
                publico BOOLEAN DEFAULT FALSE COMMENT 'Se o dashboard √© vis√≠vel para outros usu√°rios',
                compartilhado_com JSON COMMENT 'Lista de IDs de usu√°rios com acesso',
                auto_refresh INT DEFAULT 300 COMMENT 'Intervalo de atualiza√ß√£o autom√°tica em segundos',
                favorito BOOLEAN DEFAULT FALSE COMMENT 'Se est√° marcado como favorito pelo usu√°rio',
                ordem INT DEFAULT 0 COMMENT 'Ordem de exibi√ß√£o na lista',
                ativo BOOLEAN DEFAULT TRUE COMMENT 'Se o dashboard est√° ativo',
                template_id INT NULL COMMENT 'ID do template base (se criado a partir de template)',
                versao INT DEFAULT 1 COMMENT 'Vers√£o do dashboard para controle de altera√ß√µes',
                backup_configuracao JSON COMMENT 'Backup da configura√ß√£o anterior',
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                
                INDEX idx_dashboards_usuario (user_id),
                INDEX idx_dashboards_tipo (tipo),
                INDEX idx_dashboards_publico (publico, ativo),
                INDEX idx_dashboards_favorito (user_id, favorito),
                
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
                FOREIGN KEY (template_id) REFERENCES dashboards(id) ON DELETE SET NULL
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
        `);
        console.log('‚úÖ Tabela dashboards criada com sucesso');

        // 3. Tabela de Relat√≥rios
        console.log('\nüìÑ Criando tabela relatorios...');
        await sequelize.query(`
            CREATE TABLE IF NOT EXISTS relatorios (
                id INT AUTO_INCREMENT PRIMARY KEY,
                nome VARCHAR(255) NOT NULL COMMENT 'Nome do relat√≥rio',
                descricao TEXT COMMENT 'Descri√ß√£o do relat√≥rio',
                tipo ENUM(
                    'ordens_servico',
                    'ativos',
                    'manutencao_preventiva',
                    'custos',
                    'produtividade',
                    'disponibilidade',
                    'estoque',
                    'kpis',
                    'personalizado'
                ) NOT NULL COMMENT 'Tipo do relat√≥rio',
                categoria ENUM(
                    'operacional',
                    'gerencial',
                    'estrategico',
                    'financeiro',
                    'tecnico'
                ) NOT NULL COMMENT 'Categoria do relat√≥rio',
                user_id INT NOT NULL COMMENT 'Usu√°rio que criou o relat√≥rio',
                query_sql TEXT COMMENT 'Query SQL para relat√≥rios personalizados',
                configuracao JSON NOT NULL COMMENT 'Configura√ß√£o do relat√≥rio (filtros, campos, etc.)',
                parametros JSON COMMENT 'Par√¢metros configur√°veis do relat√≥rio',
                colunas JSON NOT NULL COMMENT 'Defini√ß√£o das colunas do relat√≥rio',
                filtros_padrao JSON COMMENT 'Filtros padr√£o aplicados',
                ordenacao_padrao JSON COMMENT 'Ordena√ß√£o padr√£o',
                formato_saida JSON NOT NULL COMMENT 'Formatos de sa√≠da suportados',
                agendamento JSON COMMENT 'Configura√ß√£o de agendamento autom√°tico',
                publico BOOLEAN DEFAULT FALSE COMMENT 'Se o relat√≥rio √© p√∫blico',
                compartilhado_com JSON COMMENT 'Usu√°rios com acesso ao relat√≥rio',
                template BOOLEAN DEFAULT FALSE COMMENT 'Se √© um template de relat√≥rio',
                ativo BOOLEAN DEFAULT TRUE COMMENT 'Se o relat√≥rio est√° ativo',
                favorito BOOLEAN DEFAULT FALSE COMMENT 'Se est√° marcado como favorito',
                execucoes INT DEFAULT 0 COMMENT 'N√∫mero de execu√ß√µes do relat√≥rio',
                ultima_execucao DATETIME COMMENT 'Data da √∫ltima execu√ß√£o',
                tempo_medio_execucao INT COMMENT 'Tempo m√©dio de execu√ß√£o em milissegundos',
                tamanho_medio_resultado INT COMMENT 'Tamanho m√©dio do resultado em bytes',
                versao INT DEFAULT 1 COMMENT 'Vers√£o do relat√≥rio',
                tags JSON COMMENT 'Tags para organiza√ß√£o e busca',
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                
                INDEX idx_relatorios_usuario (user_id),
                INDEX idx_relatorios_tipo (tipo),
                INDEX idx_relatorios_categoria (categoria),
                INDEX idx_relatorios_publico (publico, ativo),
                INDEX idx_relatorios_template (template, ativo),
                INDEX idx_relatorios_favorito (user_id, favorito),
                
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
        `);
        console.log('‚úÖ Tabela relatorios criada com sucesso');

        // 4. Tabela de Execu√ß√µes de Relat√≥rios
        console.log('\n‚ö° Criando tabela relatorio_execucoes...');
        await sequelize.query(`
            CREATE TABLE IF NOT EXISTS relatorio_execucoes (
                id INT AUTO_INCREMENT PRIMARY KEY,
                relatorio_id INT NOT NULL COMMENT 'ID do relat√≥rio executado',
                user_id INT NOT NULL COMMENT 'Usu√°rio que executou o relat√≥rio',
                parametros_utilizados JSON COMMENT 'Par√¢metros utilizados na execu√ß√£o',
                status ENUM(
                    'executando',
                    'concluido',
                    'erro',
                    'cancelado',
                    'timeout'
                ) NOT NULL DEFAULT 'executando' COMMENT 'Status da execu√ß√£o',
                inicio_execucao DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'In√≠cio da execu√ß√£o',
                fim_execucao DATETIME COMMENT 'Fim da execu√ß√£o',
                tempo_execucao INT COMMENT 'Tempo de execu√ß√£o em milissegundos',
                registros_retornados INT COMMENT 'N√∫mero de registros retornados',
                tamanho_resultado INT COMMENT 'Tamanho do resultado em bytes',
                formato_exportacao ENUM('html', 'pdf', 'excel', 'csv', 'json') COMMENT 'Formato de exporta√ß√£o utilizado',
                arquivo_gerado VARCHAR(500) COMMENT 'Caminho do arquivo gerado (se exportado)',
                hash_resultado VARCHAR(64) COMMENT 'Hash MD5 do resultado para cache',
                mensagem_erro TEXT COMMENT 'Mensagem de erro (se houver)',
                stack_trace TEXT COMMENT 'Stack trace do erro (se houver)',
                agendado BOOLEAN DEFAULT FALSE COMMENT 'Se foi uma execu√ß√£o agendada',
                enviado_por_email BOOLEAN DEFAULT FALSE COMMENT 'Se o resultado foi enviado por email',
                destinatarios_email JSON COMMENT 'Lista de destinat√°rios do email',
                ip_origem VARCHAR(45) COMMENT 'IP de origem da execu√ß√£o',
                user_agent TEXT COMMENT 'User agent do navegador',
                cache_utilizado BOOLEAN DEFAULT FALSE COMMENT 'Se utilizou cache na execu√ß√£o',
                cache_key VARCHAR(255) COMMENT 'Chave do cache utilizada',
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                
                INDEX idx_execucoes_relatorio (relatorio_id),
                INDEX idx_execucoes_usuario (user_id),
                INDEX idx_execucoes_status (status),
                INDEX idx_execucoes_data (inicio_execucao),
                INDEX idx_execucoes_agendado (agendado, status),
                INDEX idx_execucoes_cache (cache_key),
                
                FOREIGN KEY (relatorio_id) REFERENCES relatorios(id) ON DELETE CASCADE,
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
        `);
        console.log('‚úÖ Tabela relatorio_execucoes criada com sucesso');

        console.log('\nüéâ Todas as tabelas do sistema de Analytics foram criadas com sucesso!');
        
        // Verificar se as tabelas foram criadas
        console.log('\nüîç Verificando tabelas criadas...');
        const [tabelas] = await sequelize.query(`
            SELECT TABLE_NAME 
            FROM INFORMATION_SCHEMA.TABLES 
            WHERE TABLE_SCHEMA = 'manutencao_db' 
            AND TABLE_NAME IN ('metricas', 'dashboards', 'relatorios', 'relatorio_execucoes')
            ORDER BY TABLE_NAME
        `);
        
        console.log('üìã Tabelas encontradas:');
        tabelas.forEach(tabela => {
            console.log(`  ‚úÖ ${tabela.TABLE_NAME}`);
        });

        return true;
        
    } catch (error) {
        console.error('‚ùå Erro ao criar tabelas:', error.message);
        console.error('üîß Stack:', error.stack);
        return false;
    }
}

// Executar cria√ß√£o das tabelas
criarTabelasAnalytics().then((sucesso) => {
    if (sucesso) {
        console.log('\nüèÅ Cria√ß√£o das tabelas finalizada com sucesso!');
        process.exit(0);
    } else {
        console.log('\nüí• Falha na cria√ß√£o das tabelas!');
        process.exit(1);
    }
}).catch(error => {
    console.error('üí• Erro fatal:', error);
    process.exit(1);
});