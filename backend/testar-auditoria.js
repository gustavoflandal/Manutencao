const axios = require('axios');

const API_BASE = 'http://localhost:3001/api';

async function testarSistemaAuditoria() {
  try {
    console.log('üß™ Iniciando teste completo do sistema de auditoria...\n');

    // 1. Fazer login (deve gerar log de auditoria)
    console.log('1. üîê Testando login com auditoria...');
    const loginRes = await axios.post(`${API_BASE}/auth/login`, {
      email: 'admin@sistema.com',
      senha: '123456'
    });
    
    const token = loginRes.data.data.accessToken;
    console.log('‚úÖ Login realizado - log de auditoria registrado');

    const config = {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    };

    // 2. Criar um ativo (deve gerar log de auditoria)
    console.log('\n2. üì¶ Testando cria√ß√£o de ativo com auditoria...');
    const ativoRes = await axios.post(`${API_BASE}/ativos`, {
      codigo_patrimonio: `AUDIT-${Date.now()}`,
      nome: 'Ativo de Teste Auditoria',
      fabricante: 'Teste Ltda',
      estado: 'operacional',
      criticidade: 'media'
    }, config);
    
    const ativo = ativoRes.data.data.ativo;
    console.log(`‚úÖ Ativo criado: ${ativo.codigo_patrimonio} - log de auditoria registrado`);

    // 3. Atualizar o ativo (deve gerar log de auditoria)
    console.log('\n3. ‚úèÔ∏è Testando atualiza√ß√£o de ativo com auditoria...');
    await axios.put(`${API_BASE}/ativos/${ativo.id}`, {
      nome: 'Ativo de Teste Auditoria - ATUALIZADO',
      modelo: 'Modelo Teste v2.0'
    }, config);
    console.log('‚úÖ Ativo atualizado - log de auditoria registrado');

    // 4. Aguardar um pouco para logs serem processados
    await new Promise(resolve => setTimeout(resolve, 1000));

    // 5. Buscar logs de auditoria
    console.log('\n4. üìã Consultando logs de auditoria...');
    const logsRes = await axios.get(`${API_BASE}/auditoria/logs?limit=10`, config);
    const logs = logsRes.data.data.logs;
    
    console.log(`‚úÖ ${logs.length} logs encontrados:`);
    logs.forEach((log, index) => {
      console.log(`   ${index + 1}. ${log.operacao} - ${log.modulo} - ${log.descricao}`);
      console.log(`      Usu√°rio: ${log.usuario_nome || 'Sistema'} | Data: ${new Date(log.data_operacao).toLocaleString('pt-BR')}`);
    });

    // 6. Buscar estat√≠sticas
    console.log('\n5. üìä Consultando estat√≠sticas de auditoria...');
    const statsRes = await axios.get(`${API_BASE}/auditoria/estatisticas`, config);
    const stats = statsRes.data.data;
    
    console.log(`‚úÖ Estat√≠sticas obtidas:`);
    console.log(`   Total de opera√ß√µes: ${stats.totalOperacoes}`);
    console.log(`   Opera√ß√µes com sucesso: ${stats.operacoesSucesso}`);
    console.log(`   Taxa de sucesso: ${stats.taxaSucesso}%`);
    console.log(`   Usu√°rios ativos: ${stats.usuariosAtivos}`);

    // 7. Buscar opera√ß√µes cr√≠ticas
    console.log('\n6. ‚ö†Ô∏è Consultando opera√ß√µes cr√≠ticas...');
    const criticasRes = await axios.get(`${API_BASE}/auditoria/criticas`, config);
    const criticas = criticasRes.data.data.operacoes;
    
    console.log(`‚úÖ ${criticas.length} opera√ß√µes cr√≠ticas encontradas`);

    // 8. Gerar relat√≥rio
    console.log('\n7. üìÑ Gerando relat√≥rio de auditoria...');
    const relatorioRes = await axios.get(`${API_BASE}/auditoria/relatorio?limite=50`, config);
    const relatorio = relatorioRes.data.data;
    
    console.log(`‚úÖ Relat√≥rio gerado com ${relatorio.logs.length} registros`);
    console.log(`   Gerado em: ${new Date(relatorio.gerado_em).toLocaleString('pt-BR')}`);
    console.log(`   Gerado por: ${relatorio.gerado_por}`);

    // 9. Excluir o ativo de teste (deve gerar log de auditoria)
    console.log('\n8. üóëÔ∏è Testando exclus√£o de ativo com auditoria...');
    await axios.delete(`${API_BASE}/ativos/${ativo.id}`, config);
    console.log('‚úÖ Ativo exclu√≠do - log de auditoria registrado');

    // 10. Fazer logout (deve gerar log de auditoria)
    console.log('\n9. üö™ Testando logout com auditoria...');
    await axios.post(`${API_BASE}/auth/logout`, {}, config);
    console.log('‚úÖ Logout realizado - log de auditoria registrado');

    // 11. Verificar logs finais
    console.log('\n10. üîç Verifica√ß√£o final dos logs...');
    
    // Fazer novo login para consultar
    const loginFinalRes = await axios.post(`${API_BASE}/auth/login`, {
      email: 'admin@sistema.com',
      senha: '123456'
    });
    
    const tokenFinal = loginFinalRes.data.data.accessToken;
    const configFinal = {
      headers: {
        'Authorization': `Bearer ${tokenFinal}`
      }
    };

    const logsFinaisRes = await axios.get(`${API_BASE}/auditoria/logs?limit=15`, configFinal);
    const logsFinal = logsFinaisRes.data.data.logs;
    
    console.log(`‚úÖ ${logsFinal.length} logs totais no sistema:`);
    
    const tiposOperacao = {};
    logsFinal.forEach(log => {
      tiposOperacao[log.operacao] = (tiposOperacao[log.operacao] || 0) + 1;
    });
    
    console.log('\nüìä Resumo por tipo de opera√ß√£o:');
    Object.entries(tiposOperacao).forEach(([tipo, count]) => {
      console.log(`   ${tipo}: ${count} opera√ß√µes`);
    });

    console.log('\nüéâ TESTE COMPLETO DO SISTEMA DE AUDITORIA FINALIZADO COM SUCESSO!');
    console.log('\n‚úÖ Funcionalidades testadas e validadas:');
    console.log('   ‚Ä¢ ‚úÖ Log de login/logout autom√°tico');
    console.log('   ‚Ä¢ ‚úÖ Log de opera√ß√µes CRUD em ativos');
    console.log('   ‚Ä¢ ‚úÖ Consulta de logs com filtros');
    console.log('   ‚Ä¢ ‚úÖ Estat√≠sticas de auditoria');
    console.log('   ‚Ä¢ ‚úÖ Relat√≥rios de auditoria');
    console.log('   ‚Ä¢ ‚úÖ Consulta de opera√ß√µes cr√≠ticas');
    console.log('   ‚Ä¢ ‚úÖ Rastreamento completo de a√ß√µes do usu√°rio');

  } catch (error) {
    console.error('‚ùå Erro no teste de auditoria:', error.response?.data || error.message);
    
    if (error.response?.status === 401) {
      console.log('üí° Dica: Verifique se o token de autentica√ß√£o est√° v√°lido');
    }
    
    if (error.response?.status === 500) {
      console.log('üí° Dica: Verifique se o servidor est√° rodando e a tabela de logs foi criada');
    }
  }
}

// Executar teste
testarSistemaAuditoria();